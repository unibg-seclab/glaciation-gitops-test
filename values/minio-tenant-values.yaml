# Secret for configuring the root MinIO user
secrets:
  name: glaciation-env-configuration
  accessKey: minio
  secretKey: minio123

tenant:
  name: glaciation
  # Kubernetes secret name that contains MinIO environment variable
  # configurations
  configuration:
    name: glaciation-env-configuration
  pools:
    - name: pool-0
      # Number of MinIO Tenant pods
      servers: 4
      # Number of volumes per MinIO Tenant pod
      volumesPerServer: 4
      # Size of each volume
      size: 10Gi
      # Storage class of the volumes
      storageClassName: local-path
      # Minimum and maximum resources requested for each pod
      resources:
        requests:
          cpu: 1
          memory: 2Gi
        limits:
          cpu: 2
          memory: 4Gi
      # Security context of the pods
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
        runAsNonRoot: true
      # Security context of the containers
      containerSecurityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
        seccompProfile:
          type: RuntimeDefault
  # Enable automatic certificate generation and signing
  certificate:
    requestAutoCert: true
  # Buckets to create during Tenant provisioning
  buckets:
    - name: uc1
    - name: uc2
    - name: uc3
  # Define configuration for KES (stateless and distributed key-management
  # system)
  kes:
    image:
      repository: quay.io/minio/kes
      tag: 2024-03-13T17-52-13Z
    imagePullPolicy: IfNotPresent
    replicas: 2
    # Workaround for mounting a custom root certificate
    clientCertSecret:
      name: ca-bundle
      type: kubernetes.io/tls
    # Name of the key created on Vault
    keyName: encryption-key
    serviceAccountName: minio-kes
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      fsGroup: 1000
    containerSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      allowPrivilegeEscalation: false
    configuration: |-
      address: :7373
      tls:
        key: /tmp/kes/server.key # Path to the TLS private key
        cert: /tmp/kes/server.crt # Path to the TLS certificate
      admin:
        identity: ${MINIO_KES_IDENTITY}
      cache:
        expiry:
          any: 5m0s
          unused: 20s
      log:
        error: on
        audit: off
      keystore:
        vault:
          endpoint: "https://vault-internal.vault.svc.cluster.local:8200"
          version: v2
          prefix: "minio-tenant" # Vault will store keys under this prefix
          kubernetes:
            role: "minio-kes"
            jwt: "/var/run/secrets/kubernetes.io/serviceaccount/token"
          tls: # The Vault client TLS configuration for certificate verification
            ca: "/tmp/kes/ca.crt" # Path to PEM root CA certificates
          status:
            ping: 10s # Duration until the server checks Vault's status again

ingress:
  api:
    enabled: true
    ingressClassName: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    host: glaciation-tenant.integration
    path: /
    pathType: Prefix
  console:
    enabled: true
    ingressClassName: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    host: glaciation-tenant-console.integration
    path: /
    pathType: Prefix
