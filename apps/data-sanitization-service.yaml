apiVersion: v1
kind: Secret
metadata:
  name: minio-credentials
  namespace: spark-app
stringData:
  AWS_ACCESS_KEY_ID: minio
  AWS_SECRET_ACCESS_KEY: minio123
---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-sanitization-config-bucket
  namespace: spark-app
spec:
  template:
    spec:
      containers:
      - name: minio-client
        image: quay.io/minio/minio:RELEASE.2024-03-15T01-07-19Z
        envFrom:
        - secretRef:
            name: minio-credentials
        command:
        - /bin/sh
        - -c
        - |
          set -x;  # enable printing the command before execution (in the sub-shell)
          mc alias set minio https://minio.minio-tenant.svc.cluster.local $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY;
          mc mb minio/sanitization/config
        securityContext:
          privileged: false
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - mountPath: /etc/ssl/certs/ca.crt
          subPath: ca.crt
          name: ca-bundle
          readOnly: true
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      volumes:
      - name: ca-bundle
        configMap:
          defaultMode: 422
          name: ca-bundle
  backoffLimit: 1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: data-sanitization
  namespace: spark-app
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: data-sanitization-role
  namespace: spark-app
rules:
- apiGroups: ["sparkoperator.k8s.io"]
  resources: ["sparkapplications"]
  verbs: ["create", "delete"]
- apiGroups: ["sparkoperator.k8s.io"]
  resources: ["sparkapplications/status"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: data-sanitization-role-binding
  namespace: spark-app
subjects:
- kind: ServiceAccount
  name: data-sanitization
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: data-sanitization-role
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-sanitization
  namespace: spark-app
  labels:
    app: data-sanitization
spec:
  replicas: 1
  selector:
    matchLabels:
      app: data-sanitization
  template:
    metadata:
      labels:
        app: data-sanitization
    spec:
      containers:
        - name: data-sanitization
          image: mattlectic/data-sanitization:0.2.0
          imagePullPolicy: IfNotPresent
          env:
            - name: ENDPOINT
              value: minio.minio-tenant.svc.cluster.local
            - name: SSL_CERT_FILE
              value: /etc/ssl/certs/ca.crt
          envFrom:
            - secretRef:
                name: minio-credentials
          command:
            - uvicorn
            - openapi_server.main:app
            - --host=0.0.0.0
            - --port=8080
          ports:
            - name: http
              containerPort: 8080
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 500m
              memory: 1024Mi
          volumeMounts:
            - mountPath: /etc/ssl/certs/ca.crt
              name: ca
              subPath: ca.crt
      serviceAccount: data-sanitization
      volumes:
        - name: ca
          configMap:
            name: ca-bundle
---
apiVersion: v1
kind: Service
metadata:
  name: data-sanitization
  namespace: spark-app
  labels:
    app: data-sanitization
spec:
  selector:
    app: data-sanitization
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: data-sanitization
  namespace: spark-app
  annotations:
    # NOTE: To make sure the certificate is trusted by clients we should use
    # something like Let's Encrypt
    cert-manager.io/cluster-issuer: "private-ca-issuer"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - data-sanitization.integration
    secretName: data-sanitization-ingress
  rules:
  - host: data-sanitization.integration
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: data-sanitization
            port:
              number: 80
