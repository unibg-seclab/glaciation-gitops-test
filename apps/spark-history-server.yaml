apiVersion: batch/v1
kind: Job
metadata:
  name: create-sanitization-spark-events-bucket
  namespace: spark-app
spec:
  template:
    spec:
      containers:
      - name: minio-client
        image: quay.io/minio/minio:RELEASE.2024-03-15T01-07-19Z
        envFrom:
        - secretRef:
            name: minio-credentials
        command:
        - /bin/sh
        - -c
        - |
          set -x;  # enable printing the command before execution (in the sub-shell)
          mc alias set minio https://minio.minio-tenant.svc.cluster.local $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY;
          mc mb minio/sanitization/spark-events
        securityContext:
          privileged: false
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - mountPath: /etc/ssl/certs/ca.crt
          subPath: ca.crt
          name: ca-bundle
          readOnly: true
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      volumes:
      - name: ca-bundle
        configMap:
          defaultMode: 422
          name: ca-bundle
  backoffLimit: 1
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spark-history-server-config
  namespace: spark-app
data:
  spark-defaults.conf: |-
    spark.hadoop.fs.s3a.endpoint=https://minio.minio-tenant.svc.cluster.local
    spark.hadoop.fs.s3a.path.style.access=true
    spark.hadoop.fs.s3a.attempts.maximum=1
    spark.hadoop.fs.s3a.connection.establish.timeout=5000
    spark.hadoop.fs.s3a.connection.timeout=10000
    spark.history.fs.logDirectory=s3a://sanitization/spark-events/
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spark-history-server
  namespace: spark-app
  labels:
    app: spark-history-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spark-history-server
  template:
    metadata:
      labels:
        app: spark-history-server
    spec:
      containers:
      - name: spark-history-server
        image: mattlectic/spark-history-server:1.0.0
        imagePullPolicy: IfNotPresent
        command:
          - /opt/spark/sbin/start-history-server.sh
        env:
          - name: SPARK_NO_DAEMONIZE
            value: "false"
        envFrom:
          - secretRef:
              name: minio-credentials
        volumeMounts:
          - name: config
            mountPath: /opt/spark/conf/spark-defaults.conf
            subPath: spark-defaults.conf
          - name: ca
            mountPath: /opt/java/openjdk/lib/security/cacerts
            subPath: ca.jks
        ports:
          - name: http
            containerPort: 18080
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1024Mi
      volumes:
        - name: ca
          configMap:
            name: ca-bundle
        - name: config
          configMap:
            name: spark-history-server-config
---
apiVersion: v1
kind: Service
metadata:
  name: spark-history-server
  namespace: spark-app
  labels:
    app: spark-history-server
spec:
  selector:
    app: spark-history-server
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 18080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: spark-history-server
  namespace: spark-app
  annotations:
    # NOTE: To make sure the certificate is trusted by clients we should use
    # something like Let's Encrypt
    cert-manager.io/cluster-issuer: "private-ca-issuer"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - spark-history-server.integration
    secretName: spark-history-server-ingress
  rules:
  - host: spark-history-server.integration
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: spark-history-server
            port:
              number: 80
