# Setup the private certificate authority
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: selfsigned-issuer
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-9"
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: my-selfsigned-ca
  namespace: cert-manager
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-9"
spec:
  isCA: true
  commonName: my-selfsigned-ca
  secretName: root-secret
  privateKey:
    algorithm: ECDSA
    size: 256
  issuerRef:
    name: selfsigned-issuer
    kind: ClusterIssuer
    group: cert-manager.io
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: private-ca-issuer
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-9"
spec:
  ca:
    secretName: root-secret
---
# Create a bundle including the Kubernetes cluster root certificate and our
# private certificate authority root certificate
apiVersion: trust.cert-manager.io/v1alpha1
kind: Bundle
metadata:
  name: ca-bundle
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-9"
spec:
  sources:
  # Include a bundle of publicly trusted certificates which can be
  # used to validate most TLS certificates on the internet, such as
  # those issued by Let's Encrypt, Google, Amazon and others.
  - useDefaultCAs: true

  # A ConfigMap in the "trust" namespace
  - configMap:
      name: "kube-root-ca.crt"
      key: "ca.crt"

  # A Secret in the "trust" namespace
  - secret:
      name: "root-secret"
      key: "ca.crt"

  target:
    # Sync the bundle to a ConfigMap and Secret called `ca-bundle` in every
    # namespace that has the label `create-ca-bundle=true` (and if the Secret
    # belongs to the list of authorized secrets).
    # All ConfigMaps will include a PEM-formatted bundle, here named `ca.crt`.
    configMap:
      key: "ca.crt"
    secret:
      key: "ca.crt"
    namespaceSelector:
      matchLabels:
        create-ca-bundle: "true"
